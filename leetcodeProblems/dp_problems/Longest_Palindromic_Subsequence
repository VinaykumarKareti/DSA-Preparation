``class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        s2=s[::-1]
        dp=[[-1]*(len(s2)+1) for c in range(len(s)+1)]
        for i in range(len(dp)):
            dp[i][0]=0
        for j in range(len(dp[0])):
            dp[0][j]=0
        for i in range(1,len(dp)):
            for j in range(1,len(dp[0])):
                if s[i-1]==s2[j-1]:
                    dp[i][j]=1+dp[i-1][j-1]
                else:
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1])
        # print(dp)
        return dp[-1][-1]




        # def abc(i,j):
        #     if i<0 or j<0:
        #         return 0
        #     if dp[i][j]!=-1:
        #         return dp[i][j]
        #     if s[i]==s2[j]:
        #         dp[i][j]=1+abc(i-1,j-1)
        #         return dp[i][j]
        #     dp[i][j]=max(abc(i-1,j),abc(i,j-1))
        #     return dp[i][j]
        # return abc(len(s)-1,len(s2)-1)``
